USE CLASSICMODELS;
/*ASSIGNMENT*/
/*1*/
SELECT*FROM EMPLOYEES;

SELECT EMPLOYEENUMBER,FIRSTNAME,LASTNAME
FROM EMPLOYEES
WHERE JOBTITLE='SALES REP'AND REPORTSTO='1102';

SELECT*FROM PRODUCTLINES;

SELECT DISTINCT PRODUCTLINE
FROM PRODUCTLINES
WHERE PRODUCTLINE LIKE( '%CARS');


/*2*/
SELECT *FROM CUSTOMERS;

SELECT CUSTOMERNUMBER ,CUSTOMERNAME ,COUNTRY,

CASE WHEN country IN ('USA', 'Canada', 'Mexico') THEN 'North America'
	 WHEN country IN ('UK', 'France', 'Germany', 'Italy') THEN 'Europe'

END AS CUSTOMER_SEGMENT
FROM CUSTOMERS;

/*3*/
 SELECT *FROM ORDERDETAILS;
  SELECT PRODUCTCODE , SUM(QUANTITYORDERED) AS TOTAL_ORDER
  FROM ORDERDETAILS
  group by PRODUCTCODE
  ORDER BY TOTAL_ORDER
  LIMIT 10;


SELECT *FROM PAYMENTS;

SELECT
      MONTHNAME(PAYMENTDATE) AS MONTH,
      COUNT(PAYMENTDATE) AS NUM_MONTHS
 FROM PAYMENTS
 GROUP BY MONTH
 HAVING COUNT(PAYMENTDATE)>20
 ORDER BY MONTH;
 
 
 /*4*/
 
 CREATE DATABASE CUSTOMER_ORDERS;
 USE CUSTOMER_ORDERS;
 CREATE TABLE CUSTOMERS
 (
 CUSTOMER_ID INT auto_increment PRIMARY KEY,
 FIRST_NAME VARCHAR(50) NOT NULL,
 LAST_NAME VARCHAR(50) NOT NULL,
 EMAIL VARCHAR(225) UNIQUE,
 PHONE_NUMBER VARCHAR(20)
 );
 
 
 CREATE TABLE ORDERS
 (
 ORDER_ID INT auto_increment PRIMARY KEY,
 CUSTOMER_ID INT,
 ORDER_DATE DATE,
 TOTAL_AMOUNT DECIMAL(10,2) CHECK(TOTAL_AMOUNT>0),
 constraint CUSTOMER_ID_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMERS_ID));
 DESC ORDERS;
 
 /*5*/
 USE CLASSICMODELS;
 SELECT*FROM  CUSTOMERS;
 SELECT*FROM   ORDERS;
      
 SELECT COUNTRY ,COUNT(ORDERNUMBER) AS ORDER_COUNT
 FROM CUSTOMERS INNER JOIN ORDERS
 ON CUSTOMERS.CUSTOMERNUMBER=ORDERS.CUSTOMERNUMBER
 GROUP BY COUNTRY
 ORDER BY ORDER_COUNT
  LIMIT 5;
  
  /*6*/
  
  CREATE TABLE PROJECT
  (
  	EmployeeID INT auto_increment PRIMARY KEY,
    FullName VARCHAR(50) NOT NULL,
	Gender VARCHAR(10) CHECK(GENDER IN('MALE','FEMALE')),
    ManagerID INT 
    );
    
    INSERT INTO PROJECT VALUES (1,"Pranaya", "MALE",3),
							   (2,"PRIYANKA", "FEMALE",1),
                               (3,"PREETY", "FEMALE",NULL ),
							   (4,"ANURAG", "MALE",1),
                               (5,"SAMBIT", "MALE",1),
                               (6,"RAJESH", "MALE",3),
                               (7,"HINA", "FEMALE",3);
    
    SELECT *FROM PROJECT;
    
    SELECT M1.FULLNAME AS MANAGER_NAME , E1.FULLNAME AS EMPLOYEE
    FROM PROJECT M1 JOIN PROJECT E1
    ON M1.EMPLOYEEID=E1.MANAGERID
    ORDER BY MANAGER_NAME;
    /*7*/
   CREATE TABLE FACILITY
   (
    Facility_ID int,
	NAME VARCHAR (100),
	State VARCHAR(100),
    Country VARCHAR(100)
    );
 DESC FACILITY;
 /*A*/
 ALTER TABLE FACILITY MODIFY FACILITY_ID INT PRIMARY KEY auto_increment;
 /*B*/
 ALTER TABLE FACILITY ADD  COLUMN CITY VARCHAR(100) NOT NULL AFTER NAME;
   

/*8*/
USE CLASSICMODELS;
SELECT*FROM PRODUCTS;
SELECT*FROM PRODUCTLINES;
SELECT *FROM ORDERS;
SELECT*FROM ORDERDETAILS;

CREATE VIEW PRODUCT_CATEGORY_SALES AS
    SELECT 
        PRODUCTLINES.PRODUCTLINE,
        SUM(QUANTITYORDERED * PRICEEACH) AS TOTAL_SALES,
        COUNT(DISTINCT ORDERS.ORDERNUMBER) AS NUMBER_OF_ORDERS
    FROM
        ORDERS
            INNER JOIN
        ORDERDETAILS
            INNER JOIN
        PRODUCTS
            INNER JOIN
        PRODUCTLINES
            ON PRODUCTS.PRODUCTCODE = ORDERDETAILS.PRODUCTCODE
            AND ORDERDETAILS.ORDERNUMBER = ORDERS.ORDERNUMBER
            AND PRODUCTS.PRODUCTLINE = PRODUCTLINES.PRODUCTLINE
    GROUP BY PRODUCTLINES.PRODUCTLINE;
  /*9*/                                 
  USE CLASSICMODELS;
 SELECT*FROM CUSTOMERS;
 SELECT*FROM PAYMENTS;
CALL TOTAL_AMOUNT01(2003,'FRANCE');
  
  /*10*/
  /*A*/
SELECT CUSTOMERNAME, COUNT(ORDERNUMBER) AS ORDER_COUNT,DENSE_RANK() OVER(ORDER BY COUNT(ORDERNUMBER) DESC) AS ORDER_FREQUENCY_RNK
 FROM CUSTOMERS INNER JOIN ORDERS 
ON CUSTOMERS.CUSTOMERNUMBER=ORDERS.CUSTOMERNUMBER 
GROUP BY CUSTOMERNAME ; 
/*B*/
SELECT YEAR(ORDERDATE)AS YEAR,MONTHNAME(ORDERDATE)AS MONTH , COUNT(ORDERNUMBER) AS TOTAL_ORDERS , 
concat(round((count(ORDERNUMBER)-LAG(COUNT(ORDERNUMBER),1,0) OVER(ORDER BY YEAR(ORDERDATE)))/
(LAG(COUNT(ORDERNUMBER),1,0) OVER(ORDER BY YEAR(ORDERDATE)))*100),'%')  AS' % YOY_CHANGE'
 FROM ORDERS
 GROUP BY YEAR,MONTH ;
 
 /*11*/
 SELECT*FROM PRODUCTS;
 SELECT PRODUCTLINE, COUNT(PRODUCTLINE) AS TOTAL  
 FROM PRODUCTS WHERE MSRP>
(SELECT AVG(MSRP) FROM PRODUCTS)
GROUP BY PRODUCTLINE ORDER BY TOTAL DESC;
/*12*/
USE CLASSICMODELS;
CREATE TABLE EMP_EH(
EMPID INT PRIMARY KEY,
EMPNAME VARCHAR(100),
EMAILADDRESS VARCHAR(50) UNIQUE ) ;
CALL EMP_EH_VALUES(1,'OM','OM@GMAIL.COM');


SELECT *FROM EMP_EH;
CALL EMP_EH_VALUES(2,'OM','OM@GMAIL.COM');


/*13*/
 CREATE TABLE EMP_BIT(
 NAME VARCHAR(100),
 OCCUPATION VARCHAR(100),
 WORKING_DATE DATE,
 WORKING_HOURS INT );
 
 INSERT INTO EMP_BIT VALUES
('Robin', 'Scientist', '2020-10-04', 12),  
('Warner', 'Engineer', '2020-10-04', 10),  
('Peter', 'Actor', '2020-10-04', 13),  
('Marco', 'Doctor', '2020-10-04', 14),  
('Brayden', 'Teacher', '2020-10-04', 12),  
('Antonio', 'Business', '2020-10-04', -11); 

SELECT*FROM EMP_BIT;
/* OM JADHALKAR 
   BATCH 2.30 TO 4.30*/